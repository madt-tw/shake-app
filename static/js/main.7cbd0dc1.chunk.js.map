{"version":3,"sources":["ShakeDetect.js","App.js","serviceWorker.js","index.js"],"names":["ShakeDetect","props","state","date","Date","x","y","z","timesShaken","window","addEventListener","event","acceleration","setState","this","React","Component","App","Box","color","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAoDeA,E,kDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,KAAM,IAAIC,KAAQC,EAAG,EAAGC,EAAG,EAAGC,EAAG,EAAGC,YAAa,GAF9C,E,gEAKE,IAAD,OAClBC,OAAOC,iBAAiB,gBAAgB,SAAAC,GACnCA,EAAMC,aAAaP,EAAI,IACxB,EAAKQ,SAAS,CAACL,YAAa,EAAKN,MAAMM,YAAc,S,6EA4BzDM,KAAKD,SAAS,CAACV,KAAM,IAAIC,S,+BAIzB,OACE,6BACE,+CACA,sCAAYU,KAAKZ,MAAMM,YAAvB,gB,GA5CkBO,IAAMC,WCUjBC,MAPf,WACE,OAAO,kBAACC,EAAA,EAAD,CAAKC,MAAM,gBAChB,kBAAC,EAAD,QCKgBC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7cbd0dc1.chunk.js","sourcesContent":["import React from 'react';\n\nclass ShakeDetect extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {date: new Date(), x: 0, y: 0, z: 0, timesShaken: 0};\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"devicemotion\", event => {\n      if(event.acceleration.x > 30) {\n        this.setState({timesShaken: this.state.timesShaken + 1});\n      }\n    });\n\n    // this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n  }\n\n  // handleMotion(event) {\n    // updateFieldIfNotNull('Accelerometer_gx', event.accelerationIncludingGravity.x);\n    // updateFieldIfNotNull('Accelerometer_gy', event.accelerationIncludingGravity.y);\n    // updateFieldIfNotNull('Accelerometer_gz', event.accelerationIncludingGravity.z);\n\n    // updateFieldIfNotNull('Accelerometer_x', event.acceleration.x);\n    // updateFieldIfNotNull('Accelerometer_y', event.acceleration.y);\n    // updateFieldIfNotNull('Accelerometer_z', event.acceleration.z);\n    //\n    // updateFieldIfNotNull('Accelerometer_i', event.interval, 2);\n    //\n    // updateFieldIfNotNull('Gyroscope_z', event.rotationRate.alpha);\n    // updateFieldIfNotNull('Gyroscope_x', event.rotationRate.beta);\n    // updateFieldIfNotNull('Gyroscope_y', event.rotationRate.gamma);\n    // incrementEventCount();\n  // }\n\n  tick() {\n    this.setState({date: new Date()});\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Shake detector!</h1>\n        <h1>Shaken {this.state.timesShaken} times.</h1>\n      </div>\n    );\n  }\n}\n\nexport default ShakeDetect","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport ShakeDetect from \"./ShakeDetect\";\n\nfunction App() {\n  return <Box color=\"text.primary\">\n    <ShakeDetect />\n    {/*<Button variant=\"contained\" color=\"primary\">Hello World</Button>*/}\n  </Box>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}